name: Dockerizing to Amazon ECR

on:
  push: # 트리거
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: every-sentence # set this to your Amazon ECR repository name
  AWS_FUNCTION_NAME: every-sentence-lambda
  AWS_API_GATEWAY_NAME: every-sentence-gw
  AWS_LAMBDA_ROLE: lambda_full

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Create .env file
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > .env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Upload .env to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: env-file
          path: .env

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 나의 ECR 정보
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download .env Artifact
        uses: actions/download-artifact@v2
        with:
          name: env-file
          path: .

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS...
          BUILD_ARGS=$(awk -F= '{print "--build-arg " $1 "=" $2}' .env | xargs)
          docker build $BUILD_ARGS -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to Lambda
        run: |
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $AWS_FUNCTION_NAME || echo "not exists")
          if [[ $FUNCTION_EXISTS == "not exists" ]]; then
            aws lambda create-function --function-name $AWS_FUNCTION_NAME \
              --package-type Image \
              --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --role arn:aws:iam::account-id:role/$AWS_LAMBDA_ROLE
          else
            aws lambda update-function-code --function-name $AWS_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          fi

      - name: Setup API Gateway
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$AWS_API_GATEWAY_NAME'].id" --output text)
          if [ -z "$API_ID" ]; then
            API_ID=$(aws apigateway create-rest-api --name $AWS_API_GATEWAY_NAME --description "API for Lambda" --query 'id' --output text)
            PARENT_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[?path==`/`].id' --output text)
            RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $PARENT_RESOURCE_ID --path-part YourResourcePath --query 'id' --output text)
            aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method ANY --authorization-type NONE
            aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method ANY --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:region:lambda:path/2015-03-31/functions/arn:aws:lambda:region:account-id:function:$AWS_FUNCTION_NAME/invocations
            aws apigateway create-deployment --rest-api-id $API_ID --stage-name dev
            aws lambda add-permission --function-name $AWS_FUNCTION_NAME --statement-id apigateway-test-2 --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:region:account-id:$
